image: "docker:20.10"

stages:
    - build
    - pre-test
    - test
    - pre-deploy
    - deploy

variables:
    MVN_IMAGE: maven:3.6.3-jdk-11
    DOCKER_HOST: tcp://docker:2375
    AWS_IMAGE: amazon/aws-cli
    DOCKER_DIND_IMAGE: docker:19.03.0-dind

java_build:
    image: ${MVN_IMAGE}
    stage: build
    tags: 
        - shared-runners
    script:
        #- mvn clean package -DskipTests=true
        - mvn clean install
    artifacts:
        paths:
            - ./target/* 
        expire_in: 1 week

owasp_dependency_check:
  stage: pre-test
  tags: 
    - shared-runners
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  script:
    - /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME"
  allow_failure: true
  artifacts:
    untracked: true  
    when: always
    expose_as: 'OWASP Dependency Check Report'
    paths:
      - 'dependency-check-report.html'
      - 'dependency-check-report.json'
    expire_in: 1 week

sonarqube-check:
  stage: test
  image: ${MVN_IMAGE}
  tags: 
    - shared-runners
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
    GIT_DEPTH: "0" 
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn verify sonar:sonar -Dsonar.projectKey=framework-bootcamp_jedi-academy-the-force-awakens_course-api_AYM8mArl3_cgUDIT_qIQ -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.dependencyCheck.jsonReportPath=dependency-check-report.json -Dsonar.dependencyCheck.htmlReportPath=dependency-check-report.html -Dsonar.dependencyCheck.severity.blocker=9.0 -Dsonar.dependencyCheck.severity.critical=7.0 -Dsonar.dependencyCheck.severity.major=4.0 -Dsonar.dependencyCheck.severity.minor=0.0 -Dsonar.dependencyCheck.securityHotspot=true -Dsonar.sources=src/main/java -Dsonar.exclusions=src/main/java/br/com/frwk/course/util/MapperUtil.java
  allow_failure: true
  only:
    - merge_requests
    - main 
    - develop
deploy_ecr:
  stage: pre-deploy
  tags: 
    - docker-runners
  image: 
    name: ${AWS_IMAGE}
    entrypoint: [""]
  services:
    - ${DOCKER_DIND_IMAGE}
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR
  script:
    - docker build -t $DOCKER_IMAGE_NAME .
    - docker tag "$DOCKER_IMAGE_NAME" "$AWS_ECR/$DOCKER_IMAGE_NAME" 
    - docker push "$AWS_ECR/$DOCKER_IMAGE_NAME"

deploy_ecs:
  stage: deploy
  tags:
    - shared-runners
  image: 
    name: ${AWS_IMAGE}
    entrypoint: [""]
  script:
    - aws ecs update-service --cluster "$CI_AWS_ECS_CLUSTER" --service "$CI_AWS_ECS_SERVICE" --force-new-deployment